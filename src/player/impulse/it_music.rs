use module::Module;
use player::{PlayerData, Virtual, FormatPlayer};


//------------------------------------------------------------------------------
// Variables
//------------------------------------------------------------------------------

const MAXSLAVECHANNELS: usize = 256;
const NONOTE          : u8 = 0xfd;

const FINE_SINE_DATA: &'static [i8] = &[
      0,  2,  3,  5,  6,  8,  9, 11, 12, 14, 16, 17, 19, 20, 22, 23,
     24, 26, 27, 29, 30, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44,
     45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 56, 57, 58, 59,
     59, 60, 60, 61, 61, 62, 62, 62, 63, 63, 63, 64, 64, 64, 64, 64,
     64, 64, 64, 64, 64, 64, 63, 63, 63, 62, 62, 62, 61, 61, 60, 60,
     59, 59, 58, 57, 56, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46,
     45, 44, 43, 42, 41, 39, 38, 37, 36, 34, 33, 32, 30, 29, 27, 26,
     24, 23, 22, 20, 19, 17, 16, 14, 12, 11,  9,  8,  6,  5,  3,  2,
      0, -2, -3, -5, -6, -8, -9,-11,-12,-14,-16,-17,-19,-20,-22,-23,
    -24,-26,-27,-29,-30,-32,-33,-34,-36,-37,-38,-39,-41,-42,-43,-44,
    -45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-56,-57,-58,-59,
    -59,-60,-60,-61,-61,-62,-62,-62,-63,-63,-63,-64,-64,-64,-64,-64,
    -64,-64,-64,-64,-64,-64,-63,-63,-63,-62,-62,-62,-61,-61,-60,-60,
    -59,-59,-58,-57,-56,-56,-55,-54,-53,-52,-51,-50,-49,-48,-47,-46,
    -45,-44,-43,-42,-41,-39,-38,-37,-36,-34,-33,-32,-30,-29,-27,-26,
    -24,-23,-22,-20,-19,-17,-16,-14,-12,-11, -9, -8, -6, -5, -3, -2
];

const FINE_RAMPDOWN_DATA: &'static [i8] = &[
     64, 63, 63, 62, 62, 61, 61, 60, 60, 59, 59, 58, 58, 57, 57, 56,
     56, 55, 55, 54, 54, 53, 53, 52, 52, 51, 51, 50, 50, 49, 49, 48,
     48, 47, 47, 46, 46, 45, 45, 44, 44, 43, 43, 42, 42, 41, 41, 40,
     40, 39, 39, 38, 38, 37, 37, 36, 36, 35, 35, 34, 34, 33, 33, 32,
     32, 31, 31, 30, 30, 29, 29, 28, 28, 27, 27, 26, 26, 25, 25, 24,
     24, 23, 23, 22, 22, 21, 21, 20, 20, 19, 19, 18, 18, 17, 17, 16,
     16, 15, 15, 14, 14, 13, 13, 12, 12, 11, 11, 10, 10,  9,  9,  8,
      8,  7,  7,  6,  6,  5,  5,  4,  4,  3,  3,  2,  2,  1,  1,  0,
      0, -1, -1, -2, -2, -3, -3, -4, -4, -5, -5, -6, -6, -7, -7, -8,
     -8, -9, -9,-10,-10,-11,-11,-12,-12,-13,-13,-14,-14,-15,-15,-16,
    -16,-17,-17,-18,-18,-19,-19,-20,-20,-21,-21,-22,-22,-23,-23,-24,
    -24,-25,-25,-26,-26,-27,-27,-28,-28,-29,-29,-30,-30,-31,-31,-32,
    -32,-33,-33,-34,-34,-35,-35,-36,-36,-37,-37,-38,-38,-39,-39,-40,
    -40,-41,-41,-42,-42,-43,-43,-44,-44,-45,-45,-46,-46,-47,-47,-48,
    -48,-49,-49,-50,-50,-51,-51,-52,-52,-53,-53,-54,-54,-55,-55,-56,
    -56,-57,-57,-58,-58,-59,-59,-60,-60,-61,-61,-62,-62,-63,-63,-64
];

const FINE_SQUARE_WAVE: &'static [i8] = &[
     64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
     64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
     64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
     64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
     64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
     64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
     64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
     64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
];

//------------------------------------------------------------------------------

pub struct ItPlayer {
    // Zero globals
    last_sample    : u16,
    //play_mode      : u16,  // Playmode 2 = song
    current_order  : u16,
    current_pattern: u16,
    current_row    : u16,
    process_order  : u16,
    process_row    : u16,
    //bytes_to_mix   : u16,  // = Bytes per frame
    //pattern_offset : u16,
    //pattern_segment: u16,
    break_row      : u16,
    row_delay      : u8,
    row_delay_on   : bool,
    pattern_array  : u8,

    // Non zero globals
    number_of_rows : u16,
    current_tick   : u16,
    current_speed  : u16,
    process_tick   : u16,
    tempo          : u8,
    global_volume  : u8,
    num_channels   : u16,
}

impl ItPlayer {
    pub fn new(_module: &Module) -> Self {
        ItPlayer {
            last_sample    : 0,
            current_order  : 0,
            current_pattern: 0,
            current_row    : 0,
            process_order  : 0,
            process_row    : 0,
            break_row      : 0,
            row_delay      : 0,
            row_delay_on   : false,
            pattern_array  : 0,
            number_of_rows : 64,
            current_tick   : 0,
            current_speed  : 0,
            process_tick   : 0,
            tempo          : 125,
            global_volume  : 128,
            num_channels   : 256,
        }
    }


    
    fn update_data(&mut self) {

        // will not test PlayMode, assume we're always in song mode

        // UpdateData_PlayMode2
        self.process_tick -= 1;
        self.current_tick -= 1;

        if self.current_tick == 0 {
            self.current_tick = self.current_speed;
            self.process_tick = self.current_speed;
            self.row_delay -= 1;

            if self.row_delay == 0 {
                self.row_delay = 1;
                if self.process_row + 1 >= self.number_of_rows {
                    //
                }
                // UpdateData_Song1
            }
            // UpdateEffectData
        }

        // UpdateData_NoNewRow
    }
}    

impl FormatPlayer for ItPlayer {
    fn start(&mut self, _data: &mut PlayerData, _module: &Module) {
    }

    fn play(&mut self, data: &mut PlayerData, module: &Module, mut virt: &mut Virtual) {
    }

    fn reset(&mut self) {
    }
}


